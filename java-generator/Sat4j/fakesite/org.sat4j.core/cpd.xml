<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="47" tokens="326">
<file line="79" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/encoding/Ladder.java"/>
<file line="164" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/encoding/Ladder.java"/>
<codefragment>
<![CDATA[
        for (int i = 1; i <= n - 2; i++) {
            clause.push(-y[i]);
            clause.push(y[i - 1]);
            group.add(solver.addClause(clause));
            clause.clear();
        }

        // Constraint \bigwedge_{i=2}{n-1} (\neg y_{i-1} \vee y_i \vee x_i)
        for (int i = 2; i <= n - 1; i++) {
            clause.push(-y[i - 2]);
            clause.push(y[i - 1]);
            clause.push(literals.get(i - 1));
            group.add(solver.addClause(clause));
            clause.clear();
        }

        // Constraint \bigwedge_{i=2}{n-1} (\neg x_i \vee y_{i-1)})
        for (int i = 2; i <= n - 1; i++) {
            clause.push(-literals.get(i - 1));
            clause.push(y[i - 2]);
            group.add(solver.addClause(clause));
            clause.clear();
        }

        // Constraint \bigwedge_{i=2}{n-1} (\neg x_i \vee \neg y_i)
        for (int i = 2; i <= n - 1; i++) {
            clause.push(-literals.get(i - 1));
            clause.push(-y[i - 1]);
            group.add(solver.addClause(clause));
            clause.clear();
        }

        // Constraint y_1 \vee x_1
        clause.push(y[0]);
        clause.push(literals.get(0));
        group.add(solver.addClause(clause));
        clause.clear();

        // Constraint \neg y_1 \vee \neg x_1
        clause.push(-y[0]);
        clause.push(-literals.get(0));
        group.add(solver.addClause(clause));
        clause.clear();

        // Constraint \neg y_{n-1} \vee x_n
        clause.push(-y[n - 2]);
        clause.push(literals.get(n - 1));
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="227">
<file line="92" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/xplain/InsertionStrategy.java"/>
<file line="88" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/xplain/QuickXplainStrategy.java"/>
<codefragment>
<![CDATA[
            results.push(-firstExplanation.get(0));
            return results;
        }
        if (solver.isVerbose()) {
            System.out.print(solver.getLogPrefix() + "initial unsat core ");
            firstExplanation.sort();
            for (IteratorInt it = firstExplanation.iterator(); it.hasNext();) {
                System.out.print(constrs.get(-it.next()));
                System.out.print(" ");
            }
            System.out.println();
        }
        for (int i = 0; i < firstExplanation.size();) {
            if (assumps.contains(firstExplanation.get(i))) {
                firstExplanation.delete(i);
            } else {
                i++;
            }
        }
        Set<Integer> constraintsVariables = constrs.keySet();
        IVecInt remainingVariables = new VecInt(constraintsVariables.size());
        for (Integer v : constraintsVariables) {
            remainingVariables.push(v);
        }
        int p;
        for (IteratorInt it = firstExplanation.iterator(); it.hasNext();) {
            p = it.next();
            if (p < 0) {
                p = -p;
            }
            remainingVariables.remove(p);
            encodingAssumptions.push(p);
        }
]]>
</codefragment>
</duplication>
<duplication lines="52" tokens="207">
<file line="119" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/xplain/HighLevelXplain.java"/>
<file line="153" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/xplain/Xplain.java"/>
<codefragment>
<![CDATA[
            explanation.add(getConstrs().get(it.next()));
        }
        return explanation;
    }

    /**
     * @since 2.1
     */
    public void cancelExplanation() {
        this.xplainStrategy.cancelExplanationComputation();
    }

    @Override
    public int[] findModel() throws TimeoutException {
        this.assump = VecInt.EMPTY;
        return super.findModel();
    }

    @Override
    public int[] findModel(IVecInt assumps) throws TimeoutException {
        this.assump = assumps;
        return super.findModel(assumps);
    }

    @Override
    public boolean isSatisfiable() throws TimeoutException {
        this.assump = VecInt.EMPTY;
        return super.isSatisfiable();
    }

    @Override
    public boolean isSatisfiable(boolean global) throws TimeoutException {
        this.assump = VecInt.EMPTY;
        return super.isSatisfiable(global);
    }

    @Override
    public boolean isSatisfiable(IVecInt assumps) throws TimeoutException {
        this.assump = assumps;
        return super.isSatisfiable(assumps);
    }

    @Override
    public boolean isSatisfiable(IVecInt assumps, boolean global)
            throws TimeoutException {
        this.assump = assumps;
        return super.isSatisfiable(assumps, global);
    }

    @Override
    public String toString(String prefix) {
        System.out.println(prefix + "Explanation (MUS) enabled solver");
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="200">
<file line="48" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/xplain/DeletionStrategy.java"/>
<file line="66" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/xplain/QuickXplainStrategy.java"/>
<codefragment>
<![CDATA[
public class QuickXplainStrategy implements MinimizationStrategy {

    /**
	 * 
	 */
    private static final long serialVersionUID = 1L;

    private boolean computationCanceled;

    public void cancelExplanationComputation() {
        this.computationCanceled = true;
    }

    public IVecInt explain(ISolver solver, Map<Integer, ?> constrs,
            IVecInt assumps) throws TimeoutException {
        this.computationCanceled = false;
        IVecInt encodingAssumptions = new VecInt(constrs.size()
                + assumps.size());
        assumps.copyTo(encodingAssumptions);
        IVecInt firstExplanation = solver.unsatExplanation();
        IVecInt results = new VecInt(firstExplanation.size());
        if (firstExplanation.size() == 1) {
            results.push(-firstExplanation.get(0));
            return results;
        }
        if (solver.isVerbose()) {
            System.out.print(solver.getLogPrefix() + "initial unsat core ");
            firstExplanation.sort();
            for (IteratorInt it = firstExplanation.iterator(); it.hasNext();) {
                System.out.print(constrs.get(-it.next()));
                System.out.print(" ");
            }
            System.out.println();
]]>
</codefragment>
</duplication>
<duplication lines="48" tokens="179">
<file line="49" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/constraints/MixedDataStructureDanielWL.java"/>
<file line="48" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/constraints/MixedDataStructureSingleWL.java"/>
<codefragment>
<![CDATA[
public class MixedDataStructureSingleWL extends AbstractDataStructureFactory {

    private static final long serialVersionUID = 1L;

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.sat4j.minisat.DataStructureFactory#createCardinalityConstraint(org
     * .sat4j.datatype.VecInt, int)
     */
    @Override
    public Constr createCardinalityConstraint(IVecInt literals, int degree)
            throws ContradictionException {
        return AtLeast.atLeastNew(this.solver, getVocabulary(), literals,
                degree);
    }

    @Override
    public Constr createUnregisteredCardinalityConstraint(IVecInt literals,
            int degree) {
        return new AtLeast(getVocabulary(), literals, degree);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.sat4j.minisat.DataStructureFactory#createClause(org.sat4j.datatype
     * .VecInt)
     */
    public Constr createClause(IVecInt literals) throws ContradictionException {
        IVecInt v = Clauses.sanityCheck(literals, getVocabulary(), this.solver);
        if (v == null) {
            // tautological clause
            return null;
        }
        if (v.size() == 1) {
            return new UnitClause(v.last());
        }
        if (v.size() == 2) {
            return OriginalBinaryClause.brandNewClause(this.solver,
                    getVocabulary(), v);
        }
        return OriginalWLClause.brandNewClause(this.solver, getVocabulary(), v);
    }

    public Constr createUnregisteredClause(IVecInt literals) {
]]>
</codefragment>
</duplication>
<duplication lines="45" tokens="156">
<file line="51" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/constraints/MixedDataStructureDanielHT.java"/>
<file line="49" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/constraints/MixedDataStructureDanielWL.java"/>
<codefragment>
<![CDATA[
public class MixedDataStructureDanielWL extends AbstractDataStructureFactory {

    private static final long serialVersionUID = 1L;

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.sat4j.minisat.DataStructureFactory#createCardinalityConstraint(org
     * .sat4j.datatype.VecInt, int)
     */
    @Override
    public Constr createCardinalityConstraint(IVecInt literals, int degree)
            throws ContradictionException {
        return AtLeast.atLeastNew(this.solver, getVocabulary(), literals,
                degree);
    }

    @Override
    public Constr createUnregisteredCardinalityConstraint(IVecInt literals,
            int degree) {
        return new AtLeast(getVocabulary(), literals, degree);
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * org.sat4j.minisat.DataStructureFactory#createClause(org.sat4j.datatype
     * .VecInt)
     */
    public Constr createClause(IVecInt literals) throws ContradictionException {
        IVecInt v = Clauses.sanityCheck(literals, getVocabulary(), this.solver);
        if (v == null) {
            // tautological clause
            return null;
        }
        if (v.size() == 1) {
            return new UnitClause(v.last());
        }
        if (v.size() == 2) {
            return OriginalBinaryClause.brandNewClause(this.solver,
                    getVocabulary(), v);
        }
        return OriginalWLClause.brandNewClause(this.solver, getVocabulary(), v);
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="136">
<file line="58" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/constraints/ClausalDataStructureWL.java"/>
<file line="79" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/constraints/MixedDataStructureSingleWL.java"/>
<codefragment>
<![CDATA[
    public Constr createClause(IVecInt literals) throws ContradictionException {
        IVecInt v = Clauses.sanityCheck(literals, getVocabulary(), this.solver);
        if (v == null) {
            // tautological clause
            return null;
        }
        if (v.size() == 1) {
            return new UnitClause(v.last());
        }
        if (v.size() == 2) {
            return OriginalBinaryClause.brandNewClause(this.solver,
                    getVocabulary(), v);
        }
        return OriginalWLClause.brandNewClause(this.solver, getVocabulary(), v);
    }

    public Constr createUnregisteredClause(IVecInt literals) {
        return new LearntWLClause(literals, getVocabulary());
    }

    @Override
    protected ILits createLits() {
        return new Lits();
    }
}
]]>
</codefragment>
</duplication>
<duplication lines="21" tokens="127">
<file line="81" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/xplain/DeletionStrategy.java"/>
<file line="102" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/xplain/InsertionStrategy.java"/>
<codefragment>
<![CDATA[
            System.out.println();
        }
        for (int i = 0; i < firstExplanation.size();) {
            if (assumps.contains(firstExplanation.get(i))) {
                firstExplanation.delete(i);
            } else {
                i++;
            }
        }
        Set<Integer> constraintsVariables = constrs.keySet();
        IVecInt remainingVariables = new VecInt(constraintsVariables.size());
        for (Integer v : constraintsVariables) {
            remainingVariables.push(v);
        }
        int p;
        for (IteratorInt it = firstExplanation.iterator(); it.hasNext();) {
            p = it.next();
            if (p < 0) {
                p = -p;
            }
            remainingVariables.remove(p);
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="119">
<file line="60" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/reader/AAGReader.java"/>
<file line="59" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/reader/AIGReader.java"/>
<codefragment>
<![CDATA[
    AIGReader(ISolver s) {
        this.solver = new GateTranslator(s);
    }

    @Override
    public String decode(int[] model) {
        StringBuffer stb = new StringBuffer();
        for (int i = 0; i < this.nbinputs; i++) {
            stb.append(model[i] > 0 ? 1 : 0);
        }
        return stb.toString();
    }

    @Override
    public void decode(int[] model, PrintWriter out) {
        for (int i = 0; i < this.nbinputs; i++) {
            out.print(model[i] > 0 ? 1 : 0);
        }
    }
]]>
</codefragment>
</duplication>
<duplication lines="17" tokens="110">
<file line="58" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/constraints/ClausalDataStructureWL.java"/>
<file line="80" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/constraints/MixedDataStructureDanielWL.java"/>
<codefragment>
<![CDATA[
    public Constr createClause(IVecInt literals) throws ContradictionException {
        IVecInt v = Clauses.sanityCheck(literals, getVocabulary(), this.solver);
        if (v == null) {
            // tautological clause
            return null;
        }
        if (v.size() == 1) {
            return new UnitClause(v.last());
        }
        if (v.size() == 2) {
            return OriginalBinaryClause.brandNewClause(this.solver,
                    getVocabulary(), v);
        }
        return OriginalWLClause.brandNewClause(this.solver, getVocabulary(), v);
    }

    public Constr createUnregisteredClause(IVecInt literals) {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="107">
<file line="85" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/constraints/cnf/BinaryClause.java"/>
<file line="106" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/constraints/cnf/HTClause.java"/>
<codefragment>
<![CDATA[
        }
        if (this.voc.isFalsified(this.tail)) {
            outReason.push(neg(this.tail));
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see Constr#remove(Solver)
     */
    public void remove(UnitPropagationListener upl) {
        this.voc.watches(neg(this.head)).remove(this);
        this.voc.watches(neg(this.tail)).remove(this);
    }

    /*
     * (non-Javadoc)
     * 
     * @see Constr#simplify(Solver)
     */
    public boolean simplify() {
        if (this.voc.isSatisfied(this.head) || this.voc.isSatisfied(this.tail)) {
            return true;
        }
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="106">
<file line="184" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/encoding/Binary.java"/>
<file line="96" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/encoding/Binomial.java"/>
<codefragment>
<![CDATA[
        }
        return group;
    }

    @Override
    public IConstr addExactlyOne(ISolver solver, IVecInt literals)
            throws ContradictionException {
        ConstrGroup group = new ConstrGroup();

        group.add(addAtLeastOne(solver, literals));
        group.add(addAtMostOne(solver, literals));

        return group;
    }

    @Override
    public IConstr addExactly(ISolver solver, IVecInt literals, int degree)
            throws ContradictionException {
        ConstrGroup group = new ConstrGroup();

        group.add(addAtLeast(solver, literals, degree));
        group.add(addAtMost(solver, literals, degree));

        return group;
    }

}
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="106">
<file line="120" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/constraints/cnf/BinaryClause.java"/>
<file line="175" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/constraints/cnf/HTClause.java"/>
<codefragment>
<![CDATA[
    }

    /*
     * For learnt clauses only @author leberre
     */
    public boolean locked() {
        return this.voc.getReason(this.head) == this
                || this.voc.getReason(this.tail) == this;
    }

    /**
     * @return the activity of the clause
     */
    public double getActivity() {
        return this.activity;
    }

    @Override
    public String toString() {
        StringBuffer stb = new StringBuffer();
        stb.append(Lits.toString(this.head));
        stb.append("["); //$NON-NLS-1$
        stb.append(this.voc.valueToString(this.head));
        stb.append("]"); //$NON-NLS-1$
        stb.append(" "); //$NON-NLS-1$
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="104">
<file line="150" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/encoding/Commander.java"/>
<file line="126" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/encoding/Sequential.java"/>
<codefragment>
<![CDATA[
        return addAtMost(solver, literals, 1);
    }

    @Override
    public IConstr addExactlyOne(ISolver solver, IVecInt literals)
            throws ContradictionException {
        ConstrGroup group = new ConstrGroup();

        group.add(addAtLeastOne(solver, literals));
        group.add(addAtMostOne(solver, literals));

        return group;
    }

    @Override
    public IConstr addExactly(ISolver solver, IVecInt literals, int degree)
            throws ContradictionException {
        ConstrGroup group = new ConstrGroup();

        group.add(addAtLeast(solver, literals, degree));
        group.add(addAtMost(solver, literals, degree));

        return group;
    }

}
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="104">
<file line="1580" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java"/>
<file line="1642" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/core/Solver.java"/>
<codefragment>
<![CDATA[
                    }
                }
                for (; i < Solver.this.learnts.size(); i++) {
                    Solver.this.learnts.set(j++, Solver.this.learnts.get(i));
                }
                if (Solver.this.verbose) {
                    Solver.this.out.log(getLogPrefix()
                            + "cleaning " + (Solver.this.learnts.size() - j) //$NON-NLS-1$
                            + " clauses out of " + Solver.this.learnts.size()); //$NON-NLS-1$ 
                    // out.flush();
                }
                Solver.this.learnts.shrinkTo(j);
            }

            public ConflictTimer getTimer() {
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="103">
<file line="187" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/encoding/Binary.java"/>
<file line="151" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/encoding/Commander.java"/>
<file line="240" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/tools/encoding/Product.java"/>
<codefragment>
<![CDATA[
    }

    @Override
    public IConstr addExactlyOne(ISolver solver, IVecInt literals)
            throws ContradictionException {
        ConstrGroup group = new ConstrGroup();

        group.add(addAtLeastOne(solver, literals));
        group.add(addAtMostOne(solver, literals));

        return group;
    }

    @Override
    public IConstr addExactly(ISolver solver, IVecInt literals, int degree)
            throws ContradictionException {
        ConstrGroup group = new ConstrGroup();

        group.add(addAtLeast(solver, literals, degree));
        group.add(addAtMost(solver, literals, degree));

        return group;
    }

}
]]>
</codefragment>
</duplication>
<duplication lines="37" tokens="103">
<file line="381" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/constraints/card/MaxWatchCard.java"/>
<file line="451" path="/home/daniel/MAVENRELEASE/target/checkout/org.sat4j.core/src/main/java/org/sat4j/minisat/constraints/card/MinWatchCard.java"/>
<codefragment>
<![CDATA[
            }
            stb.append(">= "); //$NON-NLS-1$
            stb.append(this.degree);
        }
        return stb.toString();
    }

    /**
     * Updates information on the constraint in case of a backtrack
     * 
     * @param p
     *            unassigned literal
     */
    public void undo(int p) {
        // Le litt?ral observ? et falsifi? devient non assign?
        this.watchCumul++;
    }

    public void setLearnt() {
        throw new UnsupportedOperationException();
    }

    public void register() {
        throw new UnsupportedOperationException();
    }

    public int size() {
        return this.lits.length;
    }

    public int get(int i) {
        return this.lits[i];
    }

    public void assertConstraint(UnitPropagationListener s) {
        throw new UnsupportedOperationException();
    }
]]>
</codefragment>
</duplication>
</pmd-cpd>